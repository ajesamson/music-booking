// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Artist {
  id           Int             @id @default(autoincrement())
  uuid         String          @unique @default(uuid())
  name         String          @unique
  imageUrl     String?
  genre        String?
  bio          String?
  instagramUrl String?
  facebookUrl  String?
  twitterUrl   String?
  spotifyUrl   String?
  websiteUrl   String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  events       ArtistOnEvent[]
}

model Event {
  id             Int              @id @default(autoincrement())
  uuid           String           @unique @default(uuid())
  title          String
  description    String?
  date           DateTime
  venue          String
  capacity       Int
  address        String?
  city           String
  price          Decimal
  eventUrl       String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  artists        ArtistOnEvent[]
  bookings       Booking[]
  BookingOnEvent BookingOnEvent[]

  @@unique([title, date, venue])
}

model ArtistOnEvent {
  artist   Artist @relation(fields: [artistId], references: [id])
  artistId Int // relation scalar field (used in the `@relation` attribute above)
  event    Event  @relation(fields: [eventId], references: [id])
  eventId  Int // relation scalar field (used in the `@relation` attribute above)

  @@id([artistId, eventId])
}

model Booking {
  id             Int              @id @default(autoincrement())
  uuid           String           @unique @default(uuid())
  date           DateTime
  status         BookingStatus    @default(PENDING)
  seats          Int
  paymentAmount  Decimal
  paymentStatus  PaymentStatus    @default(PENDING)
  paymentId      String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  event          Event            @relation(fields: [eventId], references: [id], onDelete: Restrict)
  eventId        Int
  user           User             @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId         Int
  BookingOnEvent BookingOnEvent[]
}

model BookingOnEvent {
  booking   Booking @relation(fields: [bookingId], references: [id])
  bookingId Int // relation scalar field (used in the `@relation` attribute above)
  event     Event   @relation(fields: [eventId], references: [id])
  eventId   Int // relation scalar field (used in the `@relation` attribute above)

  @@id([bookingId, eventId])
}

model User {
  id       Int       @id @default(autoincrement())
  uuid     String    @unique @default(uuid())
  email    String    @unique
  password String
  profile  Profile?
  role     Role      @default(CUSTOMER)
  bookings Booking[]
}

model Profile {
  id          Int     @id @default(autoincrement())
  uuid        String  @unique @default(uuid())
  firstName   String
  lastName    String
  phoneNumber String?
  User        User    @relation(fields: [userId], references: [id])
  userId      Int     @unique
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum Role {
  CUSTOMER
  ARTIST
  ADMIN
}
